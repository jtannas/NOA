''' Database models for the auth module

SQLAlchemy style table definitions for tracking user authentication and 
logins.

References:
    - The parent application database and model table
    
Yields:
    - Tabledef: auth_users
    - Class: User
        Methods:
            __init__ initializes a new user
            __repr__ returns a printable version of user

Todo:
    - This module is going to be overhauled soon using Flask_Security

'''

# ---------------------------------------------------------------------------
# Imports:
# ---------------------------------------------------------------------------
from .. import db
from ..utils import ModelTable

from flask_login import UserMixin # UserMixin is inherited by the User table
from sqlalchemy_utils import PasswordType
from wtforms.validators import Email, Regexp

# ---------------------------------------------------------------------------
# User Model
# ---------------------------------------------------------------------------

class User(ModelTable, UserMixin):
    """ SQLAlchemy User table definition 
    
    Attributes:
        - id, primary key, autogenerated
        - name, the users name
        - email, the users email
        - password, a salted & hashed copy of the user password
        - role, TBD
        - status, TBD
        
    Notes:
        - SQLAlchemy has the password hash process built in so that password
        insertions and checks are handled by the User object
        
    """
    
    # Object Data Members
    #--------------------
    __tablename__ = 'auth_users'
    
    __pwregex = '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$'
    """ Password Requirements Regex
    
    Note:
        - Length >= 8
        - min 1 Uppercase Alpha
        - min 1 Lowervase Alpha
        - min 1 Number
    """
    __regfail = 'Does not conform to password requirements'
    
    name    = db.Column(db.String(128),  
                        nullable=False)
                        
    email    = db.Column(db.String(128), 
                        nullable=False,
                        unique=True,
                        info={'validators': Email()})
                        
    password = db.Column(PasswordType(schemes=['argon2']), 
                        nullable=False,
                        info={'validators': Regexp(__pwregex, message=__regfail)})

    role   = db.Column(db.SmallInteger, 
                        nullable=False)
                        
    status   = db.Column(db.SmallInteger, 
                        nullable=False)
                        

    # Object Method Members
    #----------------------
    def __init__(self, name, email, password, role=0, status=0):
        """ New User creation procedure """

        self.name     = name
        self.email    = email
        self.password = password
        self.role     = role
        self.status   = status

    def __repr__(self):
        """ Return Printable representation of the object """
        
        return '<User %r>' % (self.name)